import discord 
from discord import app_commands
import dotenv 
import os
import sys
from datetime import datetime, timedelta
import asyncio
import logging

# Configuration de l'encodage pour √©viter les erreurs Unicode sur Windows
if sys.platform == "win32":
    # Forcer l'encodage UTF-8 pour stdout/stderr
    import codecs
    sys.stdout = codecs.getwriter("utf-8")(sys.stdout.detach())
    sys.stderr = codecs.getwriter("utf-8")(sys.stderr.detach())
    
    # Configuration du logging pour UTF-8
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout)
        ]
    )

# Charger les variables d'environnement AVANT d'importer config
dotenv.load_dotenv()

from config import BOT_CONFIG, REPORT_CATEGORIES, ERROR_MESSAGES, validate_config
from utils import (
    SecurityValidator, RateLimiter, ReportTracker, AuditLogger,
    create_secure_embed, format_report_id, logger
)
from commands import show_stats, export_reports, purge_forum_reports
from supabase_client import supabase_client
from setup_views import SetupMainView
from guild_config import guild_config
from debug_tools import debug_system, test_supabase_manual, setup_debug_logging
from test_commands import register_test_commands
# Anciens d√©corateurs supprim√©s - interaction directe maintenant

# Activer le debug avanc√©
setup_debug_logging()

# Validation de la configuration au d√©marrage
if not validate_config():
    print("[ERREUR] Erreur de configuration. Arr√™t du bot.")
    exit(1)

TOKEN = os.getenv("DISCORD_TOKEN")

# Param√®tres du bot 
intents = discord.Intents.default()
intents.message_content = True  # N√©cessaire pour lire le contenu des DM
intents.guilds = True
intents.members = True  # N√©cessaire pour d√©tecter les nouveaux membres
intents.dm_messages = True  # N√©cessaire pour √©couter les DM
client = discord.Client(intents=intents)

# Instances des syst√®mes de s√©curit√©
rate_limiter = RateLimiter()
report_tracker = ReportTracker()
security_validator = SecurityValidator()
audit_logger = AuditLogger()

# Syst√®me de mapping temporaire utilisateur -> thread (conforme RGPD)
# Stockage temporaire en m√©moire, sans persistance
class EvidenceCollector:
    def __init__(self):
        self.user_thread_mapping = {}  # user_id -> (thread_id, report_id, expiry_timestamp)
        self.cleanup_interval = 3600  # Nettoyage automatique toutes les heures
        self.evidence_timeout = 24 * 3600  # 24h pour envoyer des preuves
    
    def register_user_thread(self, user_id: int, thread_id: int, report_id: str):
        """Enregistre temporairement la liaison utilisateur/thread"""
        expiry = datetime.now().timestamp() + self.evidence_timeout
        self.user_thread_mapping[user_id] = (thread_id, report_id, expiry)
        logger.info(f"Evidence collector: Registered user {user_id} for thread {thread_id}")
    
    def get_user_thread(self, user_id: int):
        """R√©cup√®re les informations du thread pour un utilisateur"""
        if user_id in self.user_thread_mapping:
            thread_id, report_id, expiry = self.user_thread_mapping[user_id]
            if datetime.now().timestamp() < expiry:
                return thread_id, report_id
            else:
                # Expiry automatique
                del self.user_thread_mapping[user_id]
                logger.info(f"Evidence collector: Expired mapping for user {user_id}")
        return None, None
    
    def remove_user_mapping(self, user_id: int):
        """Supprime manuellement une liaison utilisateur/thread"""
        if user_id in self.user_thread_mapping:
            del self.user_thread_mapping[user_id]
            logger.info(f"Evidence collector: Removed mapping for user {user_id}")
    
    def cleanup_expired(self):
        """Nettoie les mappings expir√©s (appel√© p√©riodiquement)"""
        current_time = datetime.now().timestamp()
        expired_users = [
            user_id for user_id, (_, _, expiry) in self.user_thread_mapping.items() 
            if current_time >= expiry
        ]
        for user_id in expired_users:
            del self.user_thread_mapping[user_id]
        if expired_users:
            logger.info(f"Evidence collector: Cleaned up {len(expired_users)} expired mappings")

evidence_collector = EvidenceCollector()

# View pour s√©lectionner la cat√©gorie avant le modal
class CategorySelectView(discord.ui.View):
    def __init__(self, guild_id: int):
        super().__init__(timeout=300)
        self.guild_id = guild_id
        self.selected_category = None

    @discord.ui.select(
        placeholder="S√©lectionnez une cat√©gorie de signalement...",
        options=[
            discord.SelectOption(label="üö® Harc√®lement", value="harassment", description="Comportement de harc√®lement"),
            discord.SelectOption(label="üîû Contenu inappropri√©", value="inappropriate_content", description="Contenu NSFW ou inappropri√©"),
            discord.SelectOption(label="üëÅÔ∏è Comportement suspect", value="suspicious_behavior", description="Activit√© suspecte"),
            discord.SelectOption(label="üõ°Ô∏è S√©curit√© des mineurs", value="child_safety", description="Risques pour les mineurs"),
            discord.SelectOption(label="üì¢ Spam", value="spam", description="Messages r√©p√©titifs ou ind√©sirables"),
            discord.SelectOption(label="üí∞ Arnaque", value="scam", description="Tentative d'escroquerie"),
            discord.SelectOption(label="‚öîÔ∏è Menaces", value="threats", description="Menaces ou violence"),
            discord.SelectOption(label="‚ùì Autre", value="other", description="Autre type de probl√®me")
        ]
    )
    async def category_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        self.selected_category = select.values[0]
        # Passer √† la s√©lection de preuve
        embed = create_secure_embed(
            "üõ°Ô∏è Signalement Agis - √âtape 2", 
            f"**Cat√©gorie s√©lectionn√©e :** {REPORT_CATEGORIES[self.selected_category]}\n\nVotre rapport repose-t-il sur une preuve ?",
            discord.Color.blue()
        )
        view = ProofSelectView(self.guild_id, self.selected_category)
        await interaction.response.edit_message(embed=embed, view=view)

# View pour s√©lectionner si on a des preuves
class ProofSelectView(discord.ui.View):
    def __init__(self, guild_id: int, category: str):
        super().__init__(timeout=300)
        self.guild_id = guild_id
        self.selected_category = category
        self.has_proof = None

    @discord.ui.select(
        placeholder="Votre rapport repose-t-il sur une preuve ?",
        options=[
            discord.SelectOption(label="‚úÖ Oui", value="oui", description="J'ai des preuves (captures, liens, etc.)"),
            discord.SelectOption(label="‚ùå Non", value="non", description="Pas de preuve directe disponible")
        ]
    )
    async def proof_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        self.has_proof = select.values[0]
        # Ouvrir le modal avec toutes les donn√©es
        modal = AgisReportModal(self.guild_id, self.selected_category, self.has_proof)
        await interaction.response.send_modal(modal)

# Modal pour la commande /agis
class AgisReportModal(discord.ui.Modal):
    def __init__(self, guild_id: int, category: str = None, has_proof: str = None):
        # Initialiser avec titre traduit
        title = translator.t("report_modal_title", guild_id)
        super().__init__(title=title)
        self.guild_id = guild_id
        self.selected_category = category
        self.has_proof = has_proof
        
        # D√©finir les champs avec traductions
        self.target_username = discord.ui.TextInput(
            label=translator.t("username_label", guild_id),
            placeholder=translator.t("username_placeholder", guild_id),
            required=True,
            max_length=BOT_CONFIG["MAX_USERNAME_LENGTH"]
        )
        
        self.report_reason = discord.ui.TextInput(
            label=translator.t("reason_label", guild_id),
            placeholder=translator.t("reason_placeholder", guild_id),
            required=True,
            style=discord.TextStyle.paragraph,
            max_length=BOT_CONFIG["MAX_REPORT_LENGTH"]
        )
        
        self.additional_evidence = discord.ui.TextInput(
            label=translator.t("evidence_label", guild_id),
            placeholder=translator.t("evidence_placeholder", guild_id),
            required=False,
            style=discord.TextStyle.paragraph,
            max_length=BOT_CONFIG["MAX_EVIDENCE_LENGTH"]
        )
        
        # Ajouter les champs au modal
        self.add_item(self.target_username)
        self.add_item(self.report_reason)
        self.add_item(self.additional_evidence)
    
    
    async def on_submit(self, interaction: discord.Interaction):
        # Diff√©rer imm√©diatement pour √©viter l'expiration
        await interaction.response.defer(ephemeral=True)
        
        # V√©rification du rate limiting
        if rate_limiter.is_rate_limited(
            interaction.user.id, 
            BOT_CONFIG["MAX_REPORTS_PER_USER_PER_HOUR"]
        ):
            await interaction.followup.send(
                ERROR_MESSAGES["rate_limited"],
                ephemeral=True
            )
            audit_logger.log_security_event(
                "RATE_LIMITED", 
                f"User {interaction.user.id} hit rate limit",
                interaction.user.id
            )
            return
        
        # Validation des entr√©es
        target_username = security_validator.sanitize_input(
            self.target_username.value, BOT_CONFIG["MAX_USERNAME_LENGTH"]
        )
        report_reason = security_validator.sanitize_input(
            self.report_reason.value, BOT_CONFIG["MAX_REPORT_LENGTH"]
        )
        
        if not security_validator.validate_username(target_username):
            await interaction.followup.send(
                ERROR_MESSAGES["invalid_input"] + " Nom d'utilisateur invalide.",
                ephemeral=True
            )
            return
        
        # V√©rification des doublons
        if report_tracker.is_duplicate_report(
            interaction.user.id, target_username, report_reason
        ):
            await interaction.followup.send(
                "‚ö†Ô∏è Signalement similaire d√©j√† soumis r√©cemment.",
                ephemeral=True
            )
            return
        
        # G√©n√©rer un ID unique pour le signalement
        report_id = format_report_id(interaction.guild.id, datetime.now())
        
        # Cr√©er un embed s√©curis√©
        embed = create_secure_embed(
            "üõ°Ô∏è Nouveau signalement Agis",
            "Un nouveau signalement anonyme a √©t√© re√ßu",
            discord.Color.orange()
        )
        
        embed.add_field(name="üÜî ID Signalement", value=f"`{report_id}`", inline=False)
        embed.add_field(name="üë§ Utilisateur signal√©", value=target_username, inline=False)
        # Utiliser la cat√©gorie s√©lectionn√©e
        category_display = REPORT_CATEGORIES.get(self.selected_category, "‚ùì Autre") if self.selected_category else "‚ùì Autre"
        embed.add_field(name="üìÇ Cat√©gorie", value=category_display, inline=False)
        embed.add_field(name="üìù Motif", value=report_reason, inline=False)
        
        if self.additional_evidence.value:
            evidence = security_validator.sanitize_input(
                self.additional_evidence.value, BOT_CONFIG["MAX_EVIDENCE_LENGTH"]
            )
            embed.add_field(name="üîó Liens et preuves", value=evidence, inline=False)
        
        proof_display = "‚úÖ Oui" if self.has_proof == "oui" else "‚ùå Non"
        embed.add_field(name="‚úÖ Preuve disponible", value=proof_display, inline=True)
        embed.add_field(name="üïê Date du signalement", value=datetime.now().strftime("%d/%m/%Y %H:%M"), inline=True)
        
        embed.set_footer(text="Signalement anonyme ‚Ä¢ En attente de validation")
        
        # Log du signalement
        audit_logger.log_report_submitted(
            interaction.user.id, target_username, interaction.guild.id
        )
        
        # Trouver le forum d'alertes
        alerts_forum = discord.utils.get(interaction.guild.channels, name=BOT_CONFIG["ALERTS_CHANNEL_NAME"])
        
        if alerts_forum and isinstance(alerts_forum, discord.ForumChannel):
            # Cr√©er un post dans le forum avec le nouveau format
            # Format: üïµÔ∏è Signalement #[ID] - [Cat√©gorie]
            category_for_title = REPORT_CATEGORIES.get(self.selected_category, "‚ùì Autre") if self.selected_category else "‚ùì Autre"
            post_title = f"üïµÔ∏è Signalement #{report_id} - {category_for_title}"
            
            # Cr√©er le post dans le forum avec l'embed directement
            thread_with_message = await alerts_forum.create_thread(
                name=post_title,
                embed=embed,  # Utiliser l'embed directement
                auto_archive_duration=BOT_CONFIG["AUTO_ARCHIVE_DURATION"],
                reason=f"Nouveau signalement Agis - {report_id}"
            )
            
            # R√©cup√©rer le thread r√©el depuis ThreadWithMessage
            thread = thread_with_message.thread
            
            # Ajouter les boutons de validation avec les donn√©es du signalement
            view = ValidationView(
                report_id, 
                interaction.guild.id,
                target_username,
                category_display,
                report_reason,
                interaction.guild.name
            )
            await thread.send("**Validation du signalement :**", view=view)
            
            # Enregistrer la liaison utilisateur/thread pour la collecte de preuves
            evidence_collector.register_user_thread(
                interaction.user.id, 
                thread.id,  # ID du thread cr√©√© (maintenant c'est le bon objet thread)
                report_id
            )
            
            # Envoyer un DM √† l'utilisateur pour la collecte de preuves
            try:
                dm_embed = create_secure_embed(
                    "üì® Signalement Agis - Preuves suppl√©mentaires",
                    f"Votre signalement **{report_id}** a √©t√© soumis avec succ√®s.",
                    discord.Color.blue()
                )
                dm_embed.add_field(
                    name="üí° Vous pouvez maintenant envoyer des preuves",
                    value="R√©pondez √† ce message priv√© avec :\n"
                          "‚Ä¢ Captures d'√©cran\n"
                          "‚Ä¢ Messages copi√©s\n"
                          "‚Ä¢ Liens vers des preuves\n"
                          "‚Ä¢ Tout autre √©l√©ment pertinent\n\n"
                          "‚è∞ **Vous avez 24h** pour envoyer vos preuves.\n"
                          "üîí **Votre anonymat** est pr√©serv√© - les preuves seront transf√©r√©es sans r√©v√©ler votre identit√©.",
                    inline=False
                )
                dm_embed.add_field(
                    name="üö´ Pour arr√™ter",
                    value="Envoyez simplement le mot `STOP` pour ne plus recevoir de demandes de preuves.",
                    inline=False
                )
                dm_embed.set_footer(text=f"ID: {report_id} ‚Ä¢ Expire dans 24h")
                
                await interaction.user.send(embed=dm_embed)
                
                await interaction.followup.send(
                    "‚úÖ Votre signalement anonyme a √©t√© envoy√© avec succ√®s !\n"
                    "üì® Un message priv√© vous a √©t√© envoy√© pour collecter d'√©ventuelles preuves suppl√©mentaires.",
                    ephemeral=True
                )
                
            except discord.Forbidden:
                # L'utilisateur n'accepte pas les DM
                await interaction.followup.send(
                    "‚úÖ Votre signalement anonyme a √©t√© envoy√© avec succ√®s !\n"
                    "‚ö†Ô∏è Impossible d'envoyer un DM - v√©rifiez vos param√®tres de confidentialit√© si vous souhaitez envoyer des preuves suppl√©mentaires.",
                    ephemeral=True
                )
        else:
            audit_logger.log_error(
                "FORUM_NOT_FOUND", 
                f"Forum {BOT_CONFIG['ALERTS_CHANNEL_NAME']} non trouv√©",
                interaction.user.id
            )
            
            # Message d'erreur plus d√©taill√© avec instructions
            error_embed = create_secure_embed(
                "‚ùå Configuration manquante",
                "Le bot Agis n'est pas encore configur√© sur ce serveur.",
                discord.Color.red()
            )
            error_embed.add_field(
                name="üîß Solution",
                value=f"Un administrateur doit ex√©cuter `/setup` pour cr√©er :\n"
                      f"‚Ä¢ Le forum `#{BOT_CONFIG['ALERTS_CHANNEL_NAME']}`\n"
                      f"‚Ä¢ Le r√¥le `@{BOT_CONFIG['VALIDATOR_ROLE_NAME']}`",
                inline=False
            )
            error_embed.add_field(
                name="üëë Administrateurs",
                value="Utilisez `/setup` pour configurer le bot automatiquement.",
                inline=False
            )
            error_embed.set_footer(text="Votre signalement n'a pas pu √™tre trait√©")
            
            await interaction.followup.send(embed=error_embed, ephemeral=True)

# Vue pour les boutons de validation
class ValidationView(discord.ui.View):
    def __init__(self, report_id: str, guild_id: int, target_username: str = None, 
                 category: str = None, reason: str = None, guild_name: str = None):
        super().__init__(timeout=BOT_CONFIG["VALIDATION_TIMEOUT_HOURS"] * 3600)  # timeout en secondes
        self.validators = set()
        self.rejectors = set()
        self.report_id = report_id
        self.guild_id = guild_id
        self.is_finalized = False
        # Donn√©es pour la centralisation
        self.target_username = target_username
        self.category = category
        self.reason = reason
        self.guild_name = guild_name
    
    @discord.ui.button(label="‚úÖ Valider", style=discord.ButtonStyle.green, custom_id="validate_report")
    async def validate_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except discord.InteractionResponded:
            # L'interaction a d√©j√† √©t√© r√©pondue
            pass
        except Exception:
            # Interaction expir√©e, ne rien faire
            return
            
        if self.is_finalized:
            await interaction.followup.send(
                "‚ÑπÔ∏è Ce signalement a d√©j√† √©t√© finalis√©.", ephemeral=True
            )
            return
            
        # V√©rifier si l'utilisateur a le r√¥le Validateur
        validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
        
        if validator_role and validator_role in interaction.user.roles:
            # Emp√™cher la double validation par le m√™me utilisateur
            if interaction.user.id in self.validators:
                await interaction.followup.send(
                    "‚ö†Ô∏è Vous avez d√©j√† valid√© ce signalement.", ephemeral=True
                )
                return
                
            # Retirer de rejectors si l'utilisateur change d'avis
            self.rejectors.discard(interaction.user.id)
            self.validators.add(interaction.user.id)
            
            # Log de l'action
            audit_logger.log_validation_action(
                interaction.user.id, "VALIDATE", self.report_id, self.guild_id
            )
            
            # Calculer le pourcentage de validation
            total_validators = len([member for member in interaction.guild.members if validator_role in member.roles])
            validation_percentage = (len(self.validators) / total_validators) * 100 if total_validators > 0 else 0
            
            embed = create_secure_embed(
                "‚úÖ Signalement valid√©",
                f"Valid√© par {interaction.user.display_name}",
                discord.Color.green()
            )
            embed.add_field(
                name="Progression", 
                value=f"{validation_percentage:.1f}% ({len(self.validators)}/{total_validators})", 
                inline=False
            )
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
            # Si le quorum est atteint
            if validation_percentage >= BOT_CONFIG["QUORUM_PERCENTAGE"]:
                await self.finalize_validation(interaction)
        else:
            await interaction.followup.send(
                f"‚ùå Vous devez avoir le r√¥le '{BOT_CONFIG['VALIDATOR_ROLE_NAME']}' pour valider ce signalement.",
                ephemeral=True
            )
    
    @discord.ui.button(label="‚ùå Rejeter", style=discord.ButtonStyle.red, custom_id="reject_report")
    async def reject_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        try:
            await interaction.response.defer(ephemeral=True)
        except discord.InteractionResponded:
            pass
        except Exception:
            return
            
        if self.is_finalized:
            await interaction.followup.send(
                "‚ÑπÔ∏è Ce signalement a d√©j√† √©t√© finalis√©.", ephemeral=True
            )
            return
            
        validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
        
        if validator_role and validator_role in interaction.user.roles:
            # Emp√™cher le double rejet par le m√™me utilisateur
            if interaction.user.id in self.rejectors:
                await interaction.followup.send(
                    "‚ö†Ô∏è Vous avez d√©j√† rejet√© ce signalement.", ephemeral=True
                )
                return
                
            # Retirer de validators si l'utilisateur change d'avis
            self.validators.discard(interaction.user.id)
            self.rejectors.add(interaction.user.id)
            
            # Log de l'action
            audit_logger.log_validation_action(
                interaction.user.id, "REJECT", self.report_id, self.guild_id
            )
            
            # Calculer le pourcentage de rejet
            total_validators = len([member for member in interaction.guild.members if validator_role in member.roles])
            rejection_percentage = (len(self.rejectors) / total_validators) * 100 if total_validators > 0 else 0
            
            embed = create_secure_embed(
                "‚ùå Signalement rejet√©",
                f"Rejet√© par {interaction.user.display_name}",
                discord.Color.red()
            )
            embed.add_field(
                name="Progression rejet", 
                value=f"{rejection_percentage:.1f}% ({len(self.rejectors)}/{total_validators})", 
                inline=False
            )
            
            await interaction.followup.send(embed=embed, ephemeral=True)
            
            # Si le quorum de rejet est atteint (m√™me seuil que validation)
            if rejection_percentage >= BOT_CONFIG["QUORUM_PERCENTAGE"]:
                await self.finalize_rejection(interaction)
        else:
            await interaction.followup.send(
                f"‚ùå Vous devez avoir le r√¥le '{BOT_CONFIG['VALIDATOR_ROLE_NAME']}' pour rejeter ce signalement.",
                ephemeral=True
            )
    
    @discord.ui.button(label="üì© Demander d√©tails", style=discord.ButtonStyle.gray, custom_id="request_details")
    async def request_details_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        """Permet aux mod√©rateurs de demander plus de d√©tails au rapporteur"""
        try:
            await interaction.response.defer(ephemeral=True)
        except discord.InteractionResponded:
            pass
        except Exception:
            return
            
        # V√©rifier si l'utilisateur a le r√¥le Validateur ou est admin
        validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
        if not (interaction.user.guild_permissions.administrator or 
                (validator_role and validator_role in interaction.user.roles)):
            await interaction.followup.send(
                f"‚ùå Vous devez avoir le r√¥le '{BOT_CONFIG['VALIDATOR_ROLE_NAME']}' ou √™tre administrateur.",
                ephemeral=True
            )
            return
        
        # V√©rifier si le signalement est encore dans la fen√™tre de collecte
        user_id = None
        for uid, (thread_id, stored_report_id, expiry) in evidence_collector.user_thread_mapping.items():
            if stored_report_id == self.report_id:
                user_id = uid
                break
        
        if not user_id:
            await interaction.followup.send(
                "‚ö†Ô∏è Ce signalement n'est plus dans la fen√™tre de collecte de preuves (>24h ou d√©j√† anonymis√©).",
                ephemeral=True
            )
            return
        
        # Demander des d√©tails via message direct au rapporteur
        try:
            user = interaction.client.get_user(user_id)
            if user:
                embed = create_secure_embed(
                    "üì© Demande de d√©tails suppl√©mentaires",
                    f"Un mod√©rateur souhaite obtenir plus d'informations sur votre signalement **{self.report_id}**.",
                    discord.Color.blue()
                )
                embed.add_field(
                    name="üë§ Demand√© par",
                    value=f"Mod√©rateur du serveur {interaction.guild.name}",
                    inline=False
                )
                embed.add_field(
                    name="üí¨ Question",
                    value="Pouvez-vous fournir plus de d√©tails ou de preuves concernant ce signalement ?",
                    inline=False
                )
                embed.add_field(
                    name="üìù Comment r√©pondre",
                    value="R√©pondez √† ce message priv√© avec les informations suppl√©mentaires. Vos preuves seront transf√©r√©es anonymement.",
                    inline=False
                )
                embed.set_footer(text=f"Signalement: {self.report_id} ‚Ä¢ Demande de d√©tails")
                
                await user.send(embed=embed)
                
                # Confirmer au mod√©rateur
                await interaction.followup.send(
                    f"‚úÖ Demande de d√©tails envoy√©e au rapporteur pour le signalement `{self.report_id}`.",
                    ephemeral=True
                )
                
                # Log de l'action
                audit_logger.log_security_event(
                    "DETAILS_REQUESTED",
                    f"Details requested for report {self.report_id} by moderator {interaction.user.id}",
                    interaction.user.id
                )
                
            else:
                await interaction.followup.send(
                    "‚ùå Impossible de contacter le rapporteur (utilisateur introuvable).",
                    ephemeral=True
                )
                
        except discord.Forbidden:
            await interaction.followup.send(
                "‚ùå Impossible d'envoyer un DM au rapporteur (param√®tres de confidentialit√©).",
                ephemeral=True
            )
        except Exception as e:
            logger.error(f"Erreur lors de l'envoi demande d√©tails: {e}")
            await interaction.followup.send(
                "‚ùå Erreur lors de l'envoi de la demande de d√©tails.",
                ephemeral=True
            )
    
    async def finalize_validation(self, interaction: discord.Interaction):
        self.is_finalized = True
        
        # D√©sactiver les boutons
        for item in self.children:
            item.disabled = True
        
        # Centraliser le signalement valid√© vers Supabase
        centralization_success = False
        centralization_attempted = False
        user_id_found = False
        
        if BOT_CONFIG["SUPABASE_ENABLED"] and self.target_username:
            try:
                # D√©terminer le niveau de flag bas√© sur la cat√©gorie
                flag_level = self.determine_flag_level(self.category)
                
                # Extraire l'ID utilisateur du target_username s'il contient un ID
                target_user_id = self.extract_user_id(self.target_username)
                
                if target_user_id:
                    user_id_found = True
                    centralization_attempted = True
                    centralization_success = await supabase_client.add_validated_report(
                        user_id=target_user_id,
                        username=self.target_username,
                        flag_level=flag_level,
                        reason=self.reason,
                        category=self.category,
                        guild_id=self.guild_id,
                        guild_name=self.guild_name
                    )
                    
                    if centralization_success:
                        logger.info(f"‚úÖ Signalement {self.report_id} centralis√© avec succ√®s")
                    else:
                        logger.warning(f"‚ö†Ô∏è √âchec de centralisation pour {self.report_id}")
                        
            except Exception as e:
                logger.error(f"Erreur lors de la centralisation: {e}")
        
        # Message diff√©rent selon si l'utilisateur a √©t√© trouv√© ou pas
        if user_id_found:
            embed = create_secure_embed(
                "üéâ Signalement valid√© et centralis√© !",
                f"Le quorum de validation a √©t√© atteint pour le signalement `{self.report_id}`.\nL'utilisateur signal√© a √©t√© ajout√© √† la base de donn√©es centralis√©e.",
                discord.Color.green()
            )
        else:
            embed = create_secure_embed(
                "‚ö†Ô∏è Signalement valid√© mais non centralis√©",
                f"Le quorum de validation a √©t√© atteint pour le signalement `{self.report_id}`.\n‚ö†Ô∏è **L'utilisateur n'a pas pu √™tre identifi√©** (utilisez @mention ou ID Discord pour la centralisation).",
                discord.Color.orange()
            )
        
        embed.add_field(
            name="üìà Statistiques",
            value=f"Validateurs: {len(self.validators)}\nRejeteurs: {len(self.rejectors)}",
            inline=True
        )
        
        # Ajouter info de centralisation
        if BOT_CONFIG["SUPABASE_ENABLED"]:
            centralization_status = "‚úÖ Centralis√©" if centralization_success else "‚ö†Ô∏è √âchec centralisation"
            embed.add_field(
                name="üåê Base centralis√©e",
                value=centralization_status,
                inline=True
            )
        
        # Log de la finalisation
        audit_logger.log_validation_action(
            interaction.user.id, "FINALIZED", self.report_id, self.guild_id
        )
        
        await interaction.channel.send(embed=embed)
        
        # Mettre √† jour le message avec les boutons d√©sactiv√©s
        try:
            # Trouver le message avec les boutons de validation
            async for message in interaction.channel.history(limit=10):
                if message.author == interaction.client.user and message.components:
                    await message.edit(view=self)
                    break
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des boutons: {e}")
    
    async def finalize_rejection(self, interaction: discord.Interaction):
        """Finaliser le rejet du signalement"""
        self.is_finalized = True
        
        # D√©sactiver les boutons
        for item in self.children:
            item.disabled = True
        
        embed = create_secure_embed(
            "‚ùå Signalement rejet√© par la communaut√©",
            f"Le quorum de rejet a √©t√© atteint pour le signalement `{self.report_id}`.\nCe signalement a √©t√© rejet√© par la communaut√©.",
            discord.Color.red()
        )
        
        # Log de finalisation
        audit_logger.log_validation_action(
            interaction.user.id, "REJECTED_FINAL", self.report_id, self.guild_id
        )
        
        await interaction.channel.send(embed=embed)
        
        # Mettre √† jour le message avec les boutons d√©sactiv√©s
        try:
            async for message in interaction.channel.history(limit=10):
                if message.author == interaction.client.user and message.components:
                    await message.edit(view=self)
                    break
        except Exception as e:
            logger.error(f"Erreur lors de la mise √† jour des boutons: {e}")
    
    def determine_flag_level(self, category: str) -> str:
        """D√©terminer le niveau de flag bas√© sur la cat√©gorie"""
        critical_categories = ["üõ°Ô∏è S√©curit√© des mineurs", "‚öîÔ∏è Menaces"]
        high_categories = ["üö® Harc√®lement", "üîû Contenu inappropri√©", "üí∞ Arnaque"]
        
        if any(cat in category for cat in critical_categories):
            return "critical"
        elif any(cat in category for cat in high_categories):
            return "high"
        else:
            return "medium"
    
    def extract_user_id(self, username_input: str) -> int:
        """Extraire l'ID utilisateur du input (mention @, pseudo ou ID)"""
        import re
        
        # 1. Chercher une mention Discord <@123456789> ou <@!123456789>
        mention_match = re.search(r'<@!?(\d{15,20})>', username_input)
        if mention_match:
            return int(mention_match.group(1))
        
        # 2. Chercher un ID Discord brut (s√©rie de chiffres 15-20 chiffres)
        id_match = re.search(r'\b(\d{15,20})\b', username_input)
        if id_match:
            return int(id_match.group(1))
        
        # Si pas d'ID trouv√©, retourner None (on ne peut pas centraliser sans ID)
        logger.warning(f"Impossible d'extraire l'ID utilisateur de: {username_input}")
        return None
    
    async def on_timeout(self):
        """G√®re l'expiration du d√©lai de validation"""
        if not self.is_finalized:
            logger.info(f"Timeout de validation pour le signalement {self.report_id}")
            # En production, vous pourriez vouloir notifier les administrateurs

# Commande slash /agis
@app_commands.command(name="agis", description="Signaler anonymement un comportement √† risque")
async def agis_report(interaction: discord.Interaction):
    """Affiche un s√©lecteur de cat√©gorie puis un modal pour signaler"""
    # V√©rifier si le bot est configur√©
    alerts_forum = discord.utils.get(interaction.guild.channels, name=BOT_CONFIG["ALERTS_CHANNEL_NAME"])
    validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
    
    if not alerts_forum or not validator_role:
        # Message d'erreur d√©taill√© avec instructions claires
        error_embed = create_secure_embed(
            "‚ùå Configuration manquante",
            "Le bot Agis n'est pas encore configur√© sur ce serveur.",
            discord.Color.red()
        )
        
        missing_items = []
        if not alerts_forum:
            missing_items.append(f"‚Ä¢ Forum `#{BOT_CONFIG['ALERTS_CHANNEL_NAME']}`")
        if not validator_role:
            missing_items.append(f"‚Ä¢ R√¥le `@{BOT_CONFIG['VALIDATOR_ROLE_NAME']}`")
        
        error_embed.add_field(
            name="üîß √âl√©ments manquants",
            value="\n".join(missing_items),
            inline=False
        )
        error_embed.add_field(
            name="üëë Pour les administrateurs",
            value="Utilisez `/setup` pour configurer automatiquement le bot.",
            inline=False
        )
        error_embed.add_field(
            name="üí° Que fait /setup ?",
            value="‚Ä¢ Cr√©e le forum pour les signalements\n‚Ä¢ Cr√©e le r√¥le pour les validateurs\n‚Ä¢ Configure les permissions",
            inline=False
        )
        error_embed.set_footer(text="Configuration requise avant utilisation")
        
        await interaction.response.send_message(embed=error_embed, ephemeral=True)
        return
    
    # Envoyer le s√©lecteur de cat√©gorie
    embed = create_secure_embed(
        "üõ°Ô∏è Signalement Agis", 
        "S√©lectionnez la cat√©gorie de votre signalement :",
        discord.Color.blue()
    )
    view = CategorySelectView(interaction.guild.id)
    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# Commande slash /categories (pour voir les cat√©gories disponibles)
@app_commands.command(name="anonymiser", description="Supprimer manuellement le lien d'anonymat d'un signalement")
@app_commands.describe(report_id="ID du signalement √† anonymiser")
async def anonymise_report(interaction: discord.Interaction, report_id: str = None):
    """Permet de supprimer manuellement le mapping utilisateur/thread avant 24h"""
    
    # V√©rifier les permissions (admin ou validateur)
    validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
    if not (interaction.user.guild_permissions.administrator or 
            (validator_role and validator_role in interaction.user.roles)):
        await interaction.response.send_message(
            "‚ùå Cette commande est r√©serv√©e aux administrateurs et validateurs.",
            ephemeral=True
        )
        return
    
    await interaction.response.defer(ephemeral=True)
    
    if report_id:
        # Anonymiser un signalement sp√©cifique
        removed = False
        for user_id, (thread_id, stored_report_id, expiry) in list(evidence_collector.user_thread_mapping.items()):
            if stored_report_id == report_id:
                evidence_collector.remove_user_mapping(user_id)
                removed = True
                break
        
        if removed:
            embed = create_secure_embed(
                "‚úÖ Signalement anonymis√©",
                f"Le lien d'anonymat pour le signalement `{report_id}` a √©t√© supprim√©.",
                discord.Color.green()
            )
            embed.add_field(
                name="üîí Cons√©quences",
                value="‚Ä¢ L'utilisateur ne peut plus envoyer de preuves\n‚Ä¢ Le lien temporaire a √©t√© d√©truit\n‚Ä¢ L'anonymat est maintenant permanent",
                inline=False
            )
        else:
            embed = create_secure_embed(
                "‚ö†Ô∏è Signalement non trouv√©",
                f"Aucun signalement actif trouv√© avec l'ID `{report_id}`.",
                discord.Color.orange()
            )
            embed.add_field(
                name="üí° Possible causes",
                value="‚Ä¢ Signalement d√©j√† expir√© (>24h)\n‚Ä¢ ID incorrect\n‚Ä¢ D√©j√† anonymis√©",
                inline=False
            )
    else:
        # Afficher les signalements actifs
        if not evidence_collector.user_thread_mapping:
            embed = create_secure_embed(
                "üì≠ Aucun signalement actif",
                "Il n'y a actuellement aucun signalement en cours de collecte de preuves.",
                discord.Color.blue()
            )
        else:
            embed = create_secure_embed(
                "üìã Signalements actifs",
                f"**{len(evidence_collector.user_thread_mapping)}** signalements en cours de collecte de preuves :",
                discord.Color.blue()
            )
            
            active_reports = []
            for user_id, (thread_id, stored_report_id, expiry) in evidence_collector.user_thread_mapping.items():
                # Calculer temps restant
                remaining_hours = max(0, (expiry - datetime.now().timestamp()) / 3600)
                active_reports.append(f"‚Ä¢ `{stored_report_id}` - Expire dans {remaining_hours:.1f}h")
            
            embed.add_field(
                name="üïê Liste des signalements",
                value="\n".join(active_reports[:10]),  # Limiter √† 10 pour √©viter embed trop long
                inline=False
            )
            embed.add_field(
                name="üí° Usage",
                value="Utilisez `/anonymiser report_id:<ID>` pour anonymiser un signalement sp√©cifique",
                inline=False
            )
    
    # Log de l'action
    audit_logger.log_security_event(
        "MANUAL_ANONYMISATION",
        f"Manual anonymisation request for report {report_id or 'list'} by user {interaction.user.id}",
        interaction.user.id
    )
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@app_commands.command(name="categories", description="Afficher les cat√©gories de signalement disponibles")
async def show_categories(interaction: discord.Interaction):
    """Affiche les cat√©gories de signalement disponibles"""
    embed = discord.Embed(
        title="üìÇ Cat√©gories de signalement Agis",
        description="Voici les cat√©gories disponibles pour vos signalements :",
        color=discord.Color.blue(),
        timestamp=discord.utils.utcnow()
    )
    
    for key, value in REPORT_CATEGORIES.items():
        embed.add_field(name=value, value=f"Utilisez : `{value}`", inline=False)
    
    embed.add_field(
        name="üí° Conseil", 
        value="Copiez-collez la cat√©gorie souhait√©e dans le champ 'Cat√©gorie du signalement' lors de l'utilisation de `/agis`",
        inline=False
    )
    
    embed.set_footer(text="Protection ‚Ä¢ Vigilance ‚Ä¢ Communaut√©")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# Commande slash /validate (pour les mod√©rateurs)
@app_commands.command(name="validate", description="Valider un signalement (Mod√©rateurs uniquement)")
async def validate_report(interaction: discord.Interaction):
    """Commande pour valider un signalement (r√©serv√©e aux mod√©rateurs)"""
    validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
    
    if validator_role and validator_role in interaction.user.roles:
        embed = create_secure_embed(
            "‚úÖ Validation de signalement",
            "Vous pouvez utiliser cette commande pour valider un signalement.",
            discord.Color.green()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
    else:
        embed = create_secure_embed(
            "‚ùå Acc√®s refus√©",
            f"Vous devez avoir le r√¥le '{BOT_CONFIG['VALIDATOR_ROLE_NAME']}' pour utiliser cette commande.",
            discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)

# Commande slash /check (pour v√©rifier manuellement un utilisateur)
@app_commands.command(name="check", description="V√©rifier si un utilisateur est flagu√© globalement")
@app_commands.describe(user="L'utilisateur √† v√©rifier")
async def check_user(interaction: discord.Interaction, user: discord.Member):
    """V√©rifier si un utilisateur est flagu√© dans la base centralis√©e"""
    
    # DEFER IMM√âDIATEMENT pour √©viter le timeout
    await interaction.response.defer(ephemeral=True)
    
    # V√©rifier les permissions (validateurs et administrateurs)
    validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
    
    if not (interaction.user.guild_permissions.administrator or 
            (validator_role and validator_role in interaction.user.roles)):
        embed = create_secure_embed(
            "‚ùå Acc√®s refus√©",
            f"Vous devez √™tre administrateur ou avoir le r√¥le '{BOT_CONFIG['VALIDATOR_ROLE_NAME']}' pour utiliser cette commande.",
            discord.Color.red()
        )
        await interaction.followup.send(embed=embed, ephemeral=True)
        return
    
    if not BOT_CONFIG["SUPABASE_ENABLED"]:
        embed = create_secure_embed(
            "‚ö†Ô∏è Service indisponible",
            "La v√©rification centralis√©e n'est pas activ√©e.",
            discord.Color.orange()
        )
        await interaction.followup.send(embed=embed, ephemeral=True)
        return
    
    try:
        # V√©rifier dans la base centralis√©e
        flag_data = await supabase_client.check_user_flag(
            user.id,
            interaction.guild.id,
            interaction.guild.name
        )
        
        if flag_data:
            # Utilisateur flagu√© trouv√©
            embed = create_secure_embed(
                "üö® Utilisateur flagu√© d√©tect√©",
                f"L'utilisateur {user.display_name} est flagu√© dans la base centralis√©e",
                discord.Color.red()
            )
            
            embed.add_field(name="üë§ Utilisateur", value=f"{user.mention} ({user.display_name})", inline=False)
            embed.add_field(name="üî¥ Niveau de flag", value=flag_data["flag_level"].upper(), inline=True)
            embed.add_field(name="üìÇ Cat√©gorie", value=flag_data["flag_category"], inline=True)
            embed.add_field(name="‚ö†Ô∏è Raison", value=flag_data["flag_reason"], inline=False)
            embed.add_field(name="üè† Flagu√© par", value=flag_data["flagged_by_guild_name"] or "Serveur inconnu", inline=True)
            embed.add_field(name="üìä Validations", value=f"{flag_data['validation_count']} serveur(s)", inline=True)
            embed.add_field(name="üìÖ Flagu√© le", value=flag_data["flagged_date"].strftime("%d/%m/%Y"), inline=True)
            
            embed.set_footer(text="V√©rification manuelle ‚Ä¢ Base centralis√©e Aegis")
            
        else:
            # Utilisateur non flagu√©
            embed = create_secure_embed(
                "‚úÖ Utilisateur v√©rifi√©",
                f"L'utilisateur {user.display_name} n'est pas flagu√© dans la base centralis√©e",
                discord.Color.green()
            )
            
            embed.add_field(name="üë§ Utilisateur", value=f"{user.mention} ({user.display_name})", inline=False)
            embed.add_field(name="‚úÖ Statut", value="Aucun flag trouv√©", inline=True)
            embed.add_field(name="üîç V√©rification", value="Base centralis√©e consult√©e", inline=True)
            
            embed.set_footer(text="V√©rification manuelle ‚Ä¢ Base centralis√©e Aegis")
        
        await interaction.followup.send(embed=embed, ephemeral=True)
        
        # Log de la v√©rification manuelle
        audit_logger.log_security_event(
            "MANUAL_CHECK",
            f"V√©rification manuelle de {user.id} par {interaction.user.id}",
            interaction.user.id
        )
        
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification de {user.display_name}: {e}")
        
        embed = create_secure_embed(
            "‚ùå Erreur de v√©rification",
            "Une erreur s'est produite lors de la v√©rification. Contactez un administrateur.",
            discord.Color.red()
        )
        await interaction.followup.send(embed=embed, ephemeral=True)

# Commande slash /setup (pour les administrateurs)
@app_commands.command(name="setup", description="Configuration avanc√©e du bot Agis")
@app_commands.describe(mode="Type de configuration √† effectuer")
@app_commands.choices(mode=[
    app_commands.Choice(name="üîß Configuration de base", value="basic"),
    app_commands.Choice(name="‚öôÔ∏è Configuration avanc√©e", value="advanced")
])
async def setup_agis(interaction: discord.Interaction, mode: str = "basic"):
    """Configuration du bot Agis - de base ou avanc√©e"""
    
    try:
        # V√©rifier si l'utilisateur est administrateur
        if not interaction.user.guild_permissions.administrator:
            embed = create_secure_embed(
                "‚ùå Acc√®s refus√©",
                "Vous devez √™tre administrateur pour utiliser cette commande.",
                discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            audit_logger.log_security_event(
                "UNAUTHORIZED_SETUP", 
                f"User {interaction.user.id} attempted setup without admin",
                interaction.user.id
            )
            return
        
        # V√©rifier si le forum existe d√©j√†
        alerts_forum = discord.utils.get(interaction.guild.channels, name=BOT_CONFIG["ALERTS_CHANNEL_NAME"])
        validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
        
        if mode == "advanced":
            # Interface avanc√©e avec boutons - PAS DE DEFER ICI
            from setup_views import SetupMainView
            
            view = SetupMainView(interaction.guild.id)
            embed = discord.Embed(
                title="‚öôÔ∏è Configuration Avanc√©e - Aegis",
                description="Choisissez les √©l√©ments √† configurer :",
                color=discord.Color.blue(),
                timestamp=datetime.now()
            )
            
            embed.add_field(
                name="üì¢ Forum alertes", 
                value="‚úÖ Configur√©" if alerts_forum else "‚ùå Manquant", 
                inline=True
            )
            embed.add_field(
                name="üë§ R√¥le validateur", 
                value="‚úÖ Configur√©" if validator_role else "‚ùå Manquant", 
                inline=True
            )
            embed.add_field(
                name="üóÑÔ∏è Supabase", 
                value="‚úÖ Activ√©" if BOT_CONFIG["SUPABASE_ENABLED"] else "‚ùå D√©sactiv√©", 
                inline=True
            )
            
            embed.add_field(
                name="üéõÔ∏è Options disponibles",
                value="‚Ä¢ **üîß Configuration de base** - Forum et r√¥les\n"
                      "‚Ä¢ **‚öîÔ∏è Actions automatiques** - Ban/Kick selon niveau\n" 
                      "‚Ä¢ **üîî Notifications** - Mentions et alertes\n"
                      "‚Ä¢ **üìä Seuils & Limites** - Rate limiting\n"
                      "‚Ä¢ **üõ°Ô∏è Quarantaine** - Isolation automatique",
                inline=False
            )
            
            embed.set_footer(text="Utilisez les boutons ci-dessous pour configurer ‚Ä¢ Expire dans 5 minutes")
            
            # R√©pondre directement sans defer
            await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
            return  # Arr√™ter ici pour le mode avanc√©
            
        # Configuration de base - mode par d√©faut
        await interaction.response.defer(ephemeral=True)
        
        # Configuration de base - cr√©er les √©l√©ments manquants
        # Cr√©er le r√¥le Validateur s'il n'existe pas
        validator_role = discord.utils.get(interaction.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
        if not validator_role:
            validator_role = await interaction.guild.create_role(
                name=BOT_CONFIG["VALIDATOR_ROLE_NAME"],
                color=discord.Color.green(),
                reason="Configuration du bot Agis"
            )
            role_created = True
        else:
            role_created = False
        
        # Cr√©er le forum d'alertes s'il n'existe pas
        alerts_forum = discord.utils.get(interaction.guild.channels, name=BOT_CONFIG["ALERTS_CHANNEL_NAME"])
        if not alerts_forum:
            # Permissions pour le forum d'alertes
            overwrites = {
                interaction.guild.default_role: discord.PermissionOverwrite(read_messages=False),
                interaction.guild.me: discord.PermissionOverwrite(read_messages=True, send_messages=True, create_public_threads=True),
                validator_role: discord.PermissionOverwrite(read_messages=True, send_messages=True)
            }
            
            # Ajouter les administrateurs
            for role in interaction.guild.roles:
                if role.permissions.administrator:
                    overwrites[role] = discord.PermissionOverwrite(read_messages=True, send_messages=True, create_public_threads=True)
            
            try:
                alerts_forum = await interaction.guild.create_forum(
                    name=BOT_CONFIG["ALERTS_CHANNEL_NAME"],
                    overwrites=overwrites,
                    reason="Configuration du bot Agis"
                )
                channel_created = True
            except discord.HTTPException as e:
                # Si c'est un canal qui existe d√©j√† avec le m√™me nom
                if "already exists" in str(e).lower() or e.code == 30013:
                    alerts_forum = discord.utils.get(interaction.guild.channels, name=BOT_CONFIG["ALERTS_CHANNEL_NAME"])
                    channel_created = False
                else:
                    raise e
        elif isinstance(alerts_forum, discord.ForumChannel):
            channel_created = False
        else:
            # Canal existant mais pas un forum, cr√©er un nouveau forum avec un nom l√©g√®rement diff√©rent
            try:
                alerts_forum = await interaction.guild.create_forum(
                    name=f"{BOT_CONFIG['ALERTS_CHANNEL_NAME']}-forum",
                    overwrites=overwrites,
                    reason="Configuration du bot Agis - canal existant renomm√©"
                )
                channel_created = True
            except Exception as e:
                # Fallback: utiliser le canal existant m√™me si ce n'est pas un forum
                channel_created = False
        
        # Cr√©er un embed de confirmation
        embed = create_secure_embed(
            "‚úÖ Configuration de base termin√©e",
            "Le bot Agis a √©t√© configur√© avec succ√®s !",
            discord.Color.green()
        )
        
        if role_created:
            embed.add_field(name="üÜï R√¥le cr√©√©", value=f"@{BOT_CONFIG['VALIDATOR_ROLE_NAME']}", inline=True)
        else:
            embed.add_field(name="‚úÖ R√¥le existant", value=f"@{BOT_CONFIG['VALIDATOR_ROLE_NAME']}", inline=True)
        
        if channel_created:
            embed.add_field(name="üÜï Forum cr√©√©", value=f"#{BOT_CONFIG['ALERTS_CHANNEL_NAME']}", inline=True)
        else:
            embed.add_field(name="‚úÖ Forum existant", value=f"#{BOT_CONFIG['ALERTS_CHANNEL_NAME']}", inline=True)
        
        embed.add_field(name="üîí Visibilit√©", value="Seuls les administrateurs et validateurs peuvent voir ce forum", inline=False)
        embed.add_field(name="üìã Prochaines √©tapes", value=f"1. Attribuer le r√¥le @{BOT_CONFIG['VALIDATOR_ROLE_NAME']} aux mod√©rateurs\n2. Utiliser /agis pour tester", inline=False)
        
        await interaction.followup.send(embed=embed, ephemeral=True)
            
    except Exception as e:
        audit_logger = AuditLogger()
        audit_logger.log_error(
            "SETUP_ERROR", 
            f"Erreur lors de la configuration: {str(e)}",
            interaction.user.id
        )
        embed = create_secure_embed(
            "‚ùå Erreur de configuration",
            f"Une erreur s'est produite : {str(e)}",
            discord.Color.red()
        )
        await interaction.followup.send(embed=embed, ephemeral=True)


@client.event
async def on_ready():
    print(f'{client.user} est connect√© √† Discord!')
    logger.info(f"Bot connect√© en tant que {client.user} (ID: {client.user.id})")
    
    # Connexion √† Supabase
    if BOT_CONFIG["SUPABASE_ENABLED"]:
        logger.info("Tentative de connexion √† Supabase...")
        try:
            connection_result = await supabase_client.connect()
            logger.info(f"R√©sultat connexion Supabase: {connection_result}")
        except Exception as e:
            logger.error(f"Erreur connexion Supabase: {e}")
    else:
        logger.info("Supabase d√©sactiv√© dans la configuration")
    
    # Synchroniser les commandes slash
    try:
        logger.info("Synchronisation des commandes slash...")
        synced = await tree.sync()
        print(f"Synchronis√© {len(synced)} commande(s) slash")
        logger.info(f"Commandes synchronis√©es: {[cmd.name for cmd in synced]}")
    except Exception as e:
        print(f"Erreur lors de la synchronisation: {e}")
        logger.error(f"Erreur synchronisation: {e}")
    
    logger.info("=== BOT AGIS PR√äT ===")
    logger.info("Commandes disponibles:")
    logger.info("- /setup (configuration)")
    logger.info("- /agis (signalement anonyme)")
    logger.info("- /categories (voir les cat√©gories)")
    logger.info("- /validate (validation mod√©rateurs)")
    logger.info("- /check (v√©rification utilisateur)")
    logger.info("- /debug (diagnostics syst√®me)")
    logger.info("- /test-supabase (test de Supabase)")
    logger.info("- !agis (commande de test)")
    logger.info(f"Configuration: Forum=#{BOT_CONFIG['ALERTS_CHANNEL_NAME']}, R√¥le=@{BOT_CONFIG['VALIDATOR_ROLE_NAME']}")
    logger.info("=== D√âMARRAGE TERMIN√â ===")
    print("[DEBUG] ‚úÖ Bot pr√™t ! Utilisez /debug pour diagnostiquer les probl√®mes")

@client.event
async def on_member_join(member):
    """V√©rifier automatiquement les nouveaux membres contre la base centralis√©e"""
    if not BOT_CONFIG["AUTO_CHECK_NEW_MEMBERS"] or not BOT_CONFIG["SUPABASE_ENABLED"]:
        return
    
    try:
        # V√©rifier si l'utilisateur est flagu√©
        flag_data = await supabase_client.check_user_flag(
            member.id, 
            member.guild.id, 
            member.guild.name
        )
        
        if flag_data:
            # Utilisateur flagu√© d√©tect√©
            await handle_flagged_user_join(member, flag_data)
            
    except Exception as e:
        logger.error(f"Erreur lors de la v√©rification de {member.display_name}: {e}")

@client.event
async def on_message(message):
    """√âcouter les messages DM pour collecter les preuves et commande de test"""
    # Ignorer les messages du bot lui-m√™me
    if message.author == client.user:
        return
    
    # Commande de test !agis
    if message.content.startswith('!agis'):
        embed = create_secure_embed(
            "üõ°Ô∏è Agis Bot - Test",
            "Le bot Agis est op√©rationnel !",
            discord.Color.blue()
        )
        embed.add_field(name="Status", value="‚úÖ Bot connect√© et fonctionnel", inline=False)
        embed.add_field(name="Commande principale", value="/agis", inline=False)
        embed.add_field(name="Description", value="Anonymous Discord reporting bot to combat risky behaviors", inline=False)
        embed.set_footer(text="Protection ‚Ä¢ Vigilance ‚Ä¢ Communaut√©")
        
        await message.channel.send(embed=embed)
        return
    
    # V√©rifier si c'est un DM (pas dans un serveur)
    if message.guild is None:
        await handle_dm_evidence(message)
    
    # Nettoyage p√©riodique des mappings expir√©s (toutes les 100 messages environ)
    import random
    if random.randint(1, 100) == 1:
        evidence_collector.cleanup_expired()

async def handle_dm_evidence(message):
    """Traite les preuves re√ßues par DM"""
    user_id = message.author.id
    
    # V√©rifier si l'utilisateur a un signalement en cours
    thread_id, report_id = evidence_collector.get_user_thread(user_id)
    if thread_id is None:
        # Pas de signalement en cours, ignorer
        return
    
    # V√©rifier si l'utilisateur veut arr√™ter la collecte
    if message.content.strip().lower() == "valider":
        evidence_collector.remove_user_mapping(user_id)
        try:
            embed = create_secure_embed(
                "‚úÖ Collecte de preuves valid√©e",
                "Vos preuves ont √©t√© valid√©es. Vous ne recevrez plus de demandes pour ce signalement.",
                discord.Color.orange()
            )
            await message.author.send(embed=embed)
        except discord.Forbidden:
            pass  # Ignore si on ne peut pas envoyer de DM
        return
    
    try:
        # R√©cup√©rer le thread correspondant
        thread = client.get_channel(thread_id)
        if thread is None:
            # Thread introuvable, supprimer le mapping
            evidence_collector.remove_user_mapping(user_id)
            return
        
        # Cr√©er un embed pour les preuves anonymes
        evidence_embed = create_secure_embed(
            "üìé Preuve suppl√©mentaire",
            f"**Signalement:** {report_id}\n**Source:** Rapporteur anonyme",
            discord.Color.green()
        )
        
        # Traiter le contenu du message
        if message.content.strip():
            # Nettoyer et valider le contenu
            clean_content = security_validator.sanitize_input(message.content, 2000)
            evidence_embed.add_field(
                name="üìù Contenu",
                value=clean_content,
                inline=False
            )
        
        # Traiter les pi√®ces jointes de mani√®re √©l√©gante
        attachments_info = []
        image_url = None
        files_to_send = []
        
        for attachment in message.attachments:
            # V√©rifier la taille (Discord limite √† 8MB pour les bots gratuits)
            if attachment.size > 8 * 1024 * 1024:  # 8MB
                attachments_info.append(f"‚ùå {attachment.filename} (trop volumineux)")
                continue
            
            attachments_info.append(f"üìé {attachment.filename} ({attachment.size} bytes)")
            
            # Si c'est une image, l'afficher dans l'embed
            if attachment.content_type and attachment.content_type.startswith('image/') and image_url is None:
                image_url = attachment.url
            else:
                # Pour les fichiers non-image, les pr√©parer pour envoi s√©par√©
                try:
                    file = await attachment.to_file()
                    files_to_send.append(file)
                except Exception as e:
                    logger.error(f"Erreur lors du transfert de pi√®ce jointe: {e}")
        
        # Ajouter les infos des pi√®ces jointes √† l'embed
        if attachments_info:
            evidence_embed.add_field(
                name="üìé Pi√®ces jointes",
                value="\n".join(attachments_info),
                inline=False
            )
        
        # Ajouter l'image √† l'embed si c'est une image
        if image_url:
            evidence_embed.set_image(url=image_url)
        
        evidence_embed.add_field(
            name="üïê Re√ßu le",
            value=datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
            inline=True
        )
        
        # Envoyer l'embed avec l'image int√©gr√©e
        await thread.send(embed=evidence_embed)
        
        # Envoyer les fichiers non-image s√©par√©ment (seulement si n√©cessaire)
        if files_to_send:
            await thread.send(f"üìé **Fichiers joints ({report_id}):**", files=files_to_send)
        
        # Confirmer √† l'utilisateur
        try:
            confirm_embed = create_secure_embed(
                "‚úÖ Preuve transf√©r√©e",
                f"Votre preuve a √©t√© ajout√©e au signalement **{report_id}**.",
                discord.Color.green()
            )
            confirm_embed.add_field(
                name="üí° Continuez",
                value="Vous pouvez envoyer d'autres preuves ou taper `valider` pour terminer.",
                inline=False
            )
            await message.author.send(embed=confirm_embed)
        except discord.Forbidden:
            pass  # Ignore si on ne peut pas envoyer de DM
        
        # Log de l'action
        audit_logger.log_security_event(
            "EVIDENCE_RECEIVED",
            f"Evidence received for report {report_id}",
            user_id
        )
        
    except Exception as e:
        logger.error(f"Erreur lors du traitement de preuve DM: {e}")
        try:
            error_embed = create_secure_embed(
                "‚ùå Erreur",
                "Une erreur est survenue lors du transfert de votre preuve. Veuillez r√©essayer.",
                discord.Color.red()
            )
            await message.author.send(embed=error_embed)
        except discord.Forbidden:
            pass

async def handle_flagged_user_join(member, flag_data):
    """G√©rer l'arriv√©e d'un utilisateur flagu√©"""
    guild_settings = guild_config.get_guild_config(member.guild.id)
    flag_level = flag_data["flag_level"]
    
    # V√©rifier si l'utilisateur a un r√¥le d'exemption
    bypass_roles = guild_settings["permissions"]["bypass_auto_actions"]
    user_roles = [role.name for role in member.roles]
    
    if any(role in user_roles for role in bypass_roles):
        logger.info(f"Utilisateur {member.id} flagu√© mais exempt√© par r√¥le")
        return
    
    # Ex√©cuter l'action automatique configur√©e
    auto_action = guild_settings["auto_actions"].get(flag_level, "alert")
    min_validations = guild_settings["thresholds"]["auto_action_min_validations"]
    
    # V√©rifier si assez de validations pour auto-action
    if flag_data["validation_count"] >= min_validations:
        await execute_auto_action(member, auto_action, flag_data, guild_settings)
    
    # Envoyer l'alerte dans tous les cas
    await send_flag_alert(member, flag_data, guild_settings, auto_action)

async def execute_auto_action(member, action, flag_data, guild_settings):
    """Ex√©cuter l'action automatique configur√©e"""
    try:
        if action == "ban":
            if guild_settings["thresholds"]["require_manual_review_for_ban"]:
                # Log pour review manuelle
                logger.warning(f"Ban automatique de {member.id} n√©cessite une review manuelle")
                return
            
            reason = f"Auto-ban Aegis: {flag_data['flag_reason']} (Niveau: {flag_data['flag_level']})"
            await member.ban(reason=reason)
            logger.info(f"Auto-ban ex√©cut√© pour {member.id}")
            
        elif action == "kick":
            reason = f"Auto-kick Aegis: {flag_data['flag_reason']} (Niveau: {flag_data['flag_level']})"
            await member.kick(reason=reason)
            logger.info(f"Auto-kick ex√©cut√© pour {member.id}")
            
        elif action == "quarantine":
            await apply_quarantine(member, guild_settings)
            logger.info(f"Quarantaine appliqu√©e pour {member.id}")
            
    except Exception as e:
        logger.error(f"Erreur lors de l'auto-action {action} pour {member.id}: {e}")

async def apply_quarantine(member, guild_settings):
    """Appliquer la quarantaine √† un membre"""
    quarantine_config = guild_settings["quarantine"]
    
    if not quarantine_config["enabled"]:
        return
    
    # Cr√©er ou trouver le r√¥le de quarantaine
    quarantine_role = discord.utils.get(
        member.guild.roles, 
        name=quarantine_config["role_name"]
    )
    
    if not quarantine_role:
        # Cr√©er le r√¥le de quarantaine avec permissions restrictives
        quarantine_role = await member.guild.create_role(
            name=quarantine_config["role_name"],
            color=discord.Color.orange(),
            reason="R√¥le de quarantaine Aegis",
            permissions=discord.Permissions(
                view_channel=True,
                send_messages=False,
                add_reactions=False,
                connect=False
            )
        )
    
    # Sauvegarder les r√¥les actuels si configur√©
    if quarantine_config["remove_roles"]:
        # Note: Dans un vrai bot, sauvegarder les r√¥les dans la DB
        await member.edit(roles=[quarantine_role], reason="Quarantaine Aegis")
    else:
        await member.add_roles(quarantine_role, reason="Quarantaine Aegis")

async def send_flag_alert(member, flag_data, guild_settings, executed_action):
    """Envoyer l'alerte de flag"""
    # Trouver le canal d'alertes de flags
    flag_channel = discord.utils.get(
        member.guild.channels, 
        name=BOT_CONFIG["FLAG_ALERT_CHANNEL"]
    )
    
    # Si pas de canal sp√©cifique, utiliser le forum principal
    if not flag_channel:
        flag_channel = discord.utils.get(
            member.guild.channels, 
            name=BOT_CONFIG["ALERTS_CHANNEL_NAME"]
        )
    
    if flag_channel:
        embed = create_secure_embed(
            "üö® Utilisateur flagu√© d√©tect√©",
            f"Un utilisateur flagu√© globalement vient de rejoindre le serveur",
            discord.Color.red()
        )
        
        embed.add_field(name="üë§ Utilisateur", value=f"{member.mention} ({member.display_name})", inline=False)
        embed.add_field(name="üî¥ Niveau de flag", value=flag_data["flag_level"].upper(), inline=True)
        embed.add_field(name="üìÇ Cat√©gorie", value=flag_data["flag_category"], inline=True)
        embed.add_field(name="‚ö†Ô∏è Raison", value=flag_data["flag_reason"], inline=False)
        embed.add_field(name="üè† Flagu√© par", value=flag_data["flagged_by_guild_name"] or "Serveur inconnu", inline=True)
        embed.add_field(name="üìä Validations", value=f"{flag_data['validation_count']} serveur(s)", inline=True)
        embed.add_field(name="üìÖ Flagu√© le", value=flag_data["flagged_date"].strftime("%d/%m/%Y"), inline=True)
        
        # Ajouter info sur l'action ex√©cut√©e
        if executed_action != "alert":
            action_text = {
                "ban": "üö´ **BANNI AUTOMATIQUEMENT**",
                "kick": "üë¢ **EXPULS√â AUTOMATIQUEMENT**", 
                "quarantine": "üîí **MIS EN QUARANTAINE**",
                "none": "‚ÑπÔ∏è Aucune action automatique"
            }.get(executed_action, executed_action)
            
            embed.add_field(name="‚ö° Action automatique", value=action_text, inline=False)
        
        embed.set_footer(text="Syst√®me de protection Aegis ‚Ä¢ V√©rification automatique")
        
        # Mentionner les validateurs selon le niveau de flag
        mention_text = ""
        if flag_data["flag_level"] in ["high", "critical"]:
            validator_role = discord.utils.get(member.guild.roles, name=BOT_CONFIG["VALIDATOR_ROLE_NAME"])
            if validator_role:
                mention_text = f"{validator_role.mention} - Attention requise !"
        
        if isinstance(flag_channel, discord.ForumChannel):
            # Cr√©er un post dans le forum
            thread_title = f"üö® FLAG: {member.display_name} ({flag_data['flag_level']})"
            thread = await flag_channel.create_thread(
                name=thread_title,
                content=mention_text,
                auto_archive_duration=BOT_CONFIG["AUTO_ARCHIVE_DURATION"]
            )
            await thread.send(embed=embed)
        else:
            # Envoyer dans un canal normal
            if mention_text:
                await flag_channel.send(mention_text)
            await flag_channel.send(embed=embed)
        
        # Log l'√©v√©nement
        audit_logger.log_security_event(
            "FLAGGED_USER_JOIN",
            f"Utilisateur flagu√© {member.id} a rejoint {member.guild.id}",
            member.id
        )

# Cr√©er un arbre de commandes et ajouter les commandes
tree = app_commands.CommandTree(client)
tree.add_command(agis_report)
tree.add_command(show_categories)
tree.add_command(validate_report)
tree.add_command(check_user)
tree.add_command(setup_agis)
# Ajouter les nouvelles commandes
tree.add_command(show_stats)
tree.add_command(export_reports)
tree.add_command(purge_forum_reports)
# Commandes de debug
tree.add_command(debug_system)
tree.add_command(test_supabase_manual)
# Commandes de test (conditionnelles selon TEST_MODE_ENABLED)
register_test_commands(tree)
# Commande anonymisation
tree.add_command(anonymise_report)

# D√©marrage s√©curis√© du bot
if __name__ == "__main__":
    try:
        logger.info("D√©marrage du bot Agis...")
        client.run(TOKEN)
    except Exception as e:
        logger.critical(f"Erreur critique lors du d√©marrage: {e}")
        exit(1)