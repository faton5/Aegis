#!/usr/bin/env python3
"""
Script de test pour le syst√®me anti-abus anonyme
Teste toutes les fonctionnalit√©s sans compromettre l'anonymat
"""
import asyncio
import sys
import secrets
import os
from pathlib import Path

# Ajouter le r√©pertoire du projet au path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config.bot_config import bot_settings, validate_config
from config.logging_config import setup_logging
from utils.anonymous_hasher import anonymous_hasher
from services.report_service import ReportService
from utils.audit_logger import audit_logger, AuditAction
from database.supabase_client import supabase_client


async def test_anonymous_hasher():
    """Test du service de hachage anonyme"""
    print("\n=== TEST ANONYMOUS HASHER ===")
    
    # Test 1: Configuration
    print("1. Test configuration...")
    if not anonymous_hasher.is_configured():
        print("‚ùå Service non configur√© - g√©n√©rons un salt temporaire")
        # G√©n√©rer un salt temporaire pour les tests
        temp_salt = secrets.token_hex(32)
        os.environ['REPORTER_SALT_SECRET'] = temp_salt
        bot_settings.reporter_salt_secret = temp_salt
        print(f"‚úÖ Salt temporaire configur√© ({len(temp_salt)} chars)")
    else:
        print("‚úÖ Service correctement configur√©")
    
    # Test 2: G√©n√©ration de hash reporter
    print("2. Test hash reporter...")
    hash1 = anonymous_hasher.generate_reporter_hash(123456, 999)
    hash2 = anonymous_hasher.generate_reporter_hash(123456, 999)  # M√™me param√®tres
    hash3 = anonymous_hasher.generate_reporter_hash(123456, 888)  # Serveur diff√©rent
    
    if hash1 and hash2 and hash3:
        print(f"‚úÖ Hash g√©n√©r√©: {hash1[:16]}...")
        print(f"‚úÖ Reproductibilit√©: {hash1 == hash2}")
        print(f"‚úÖ Diff√©rentiation: {hash1 != hash3}")
    else:
        print("‚ùå Erreur g√©n√©ration hash")
        return False
    
    # Test 3: Hash d'unicit√©
    print("3. Test hash d'unicit√©...")
    unique1 = anonymous_hasher.generate_report_uniqueness_hash(123456, 999, "target_user")
    unique2 = anonymous_hasher.generate_report_uniqueness_hash(123456, 999, "Target_User")  # Case diff√©rente
    unique3 = anonymous_hasher.generate_report_uniqueness_hash(123456, 999, "other_user")
    
    if unique1 and unique2 and unique3:
        print(f"‚úÖ Hash unicit√©: {unique1[:16]}...")
        print(f"‚úÖ Normalisation: {unique1 == unique2}")  # Doit √™tre identique malgr√© la casse
        print(f"‚úÖ Diff√©rentiation: {unique1 != unique3}")
    else:
        print("‚ùå Erreur g√©n√©ration hash unicit√©")
        return False
    
    print("‚úÖ Anonymous Hasher - Tests OK")
    return True


async def test_report_service():
    """Test du service de signalements avec anti-abus"""
    print("\n=== TEST REPORT SERVICE ===")
    
    # Initialiser le service
    report_service = ReportService()
    
    # Test 1: Premier signalement
    print("1. Test cr√©ation signalement...")
    report1 = await report_service.create_report(
        user_id=111111,
        guild_id=999888,
        target_username="suspect_user",
        category="spam",
        reason="Messages r√©p√©titifs",
        evidence="Preuves screenshots"
    )
    
    if report1:
        print(f"‚úÖ Signalement cr√©√©: {report1.id}")
        print(f"   Hash reporter: {report1.reporter_hash[:16]}..." if report1.reporter_hash else "‚ùå Hash manquant")
        print(f"   Hash unicit√©: {report1.uniqueness_hash[:16]}..." if report1.uniqueness_hash else "‚ùå Hash manquant")
    else:
        print("‚ùå √âchec cr√©ation signalement")
        return False
    
    # Test 2: Tentative de doublon
    print("2. Test d√©tection doublon...")
    report2 = await report_service.create_report(
        user_id=111111,  # M√™me utilisateur
        guild_id=999888, # M√™me serveur
        target_username="suspect_user",  # M√™me cible
        category="harassment",  # Cat√©gorie diff√©rente mais m√™me cible
        reason="Harc√®lement maintenant",
        evidence="Nouvelles preuves"
    )
    
    if report2 is None:
        print("‚úÖ Doublon correctement rejet√©")
    else:
        print("‚ùå Doublon non d√©tect√© - probl√®me de s√©curit√©!")
        return False
    
    # Test 3: Signalement valide (autre cible)
    print("3. Test nouveau signalement (cible diff√©rente)...")
    report3 = await report_service.create_report(
        user_id=111111,  # M√™me utilisateur
        guild_id=999888, # M√™me serveur  
        target_username="other_suspect",  # Cible diff√©rente
        category="scam",
        reason="Tentative d'arnaque",
        evidence=""
    )
    
    if report3:
        print(f"‚úÖ Nouveau signalement autoris√©: {report3.id}")
    else:
        print("‚ùå Nouveau signalement bloqu√© √† tort")
        return False
    
    # Test 4: M√™me cible, serveur diff√©rent (doit √™tre autoris√©)
    print("4. Test m√™me cible, serveur diff√©rent...")
    report4 = await report_service.create_report(
        user_id=111111,  # M√™me utilisateur
        guild_id=777666, # Serveur diff√©rent
        target_username="suspect_user",  # M√™me cible qu'au d√©but
        category="threats",
        reason="Menaces de violence",
        evidence="Screenshots menaces"
    )
    
    if report4:
        print(f"‚úÖ Signalement autoris√© sur autre serveur: {report4.id}")
    else:
        print("‚ùå Signalement bloqu√© √† tort sur autre serveur")
        return False
    
    # Test 5: Statistiques anti-abus
    print("5. Test statistiques...")
    stats = report_service.get_anti_abuse_stats()
    print(f"   Total signalements: {stats['total_reports']}")
    print(f"   Cache unicit√©: {stats['uniqueness_cache_size']}")
    print(f"   Hasher configur√©: {stats['anonymous_hasher_configured']}")
    
    print("‚úÖ Report Service - Tests OK")
    return True


async def test_audit_logger():
    """Test du syst√®me d'audit transparent"""
    print("\n=== TEST AUDIT LOGGER ===")
    
    # Test 1: Log de validation
    print("1. Test log validation...")
    success = await audit_logger.log_report_validation(
        report_id="TEST001",
        guild_id=999888,
        moderator_id=555444,
        moderator_name="TestModerator",
        target_username="suspect_user", 
        category="spam",
        decision=True,
        reason="Preuves suffisantes"
    )
    
    if success:
        print("‚úÖ Log validation enregistr√©")
    else:
        print("‚ùå √âchec log validation")
        return False
    
    # Test 2: Log flag utilisateur
    print("2. Test log flag utilisateur...")
    success = await audit_logger.log_user_flagged(
        guild_id=999888,
        moderator_id=555444,
        moderator_name="TestModerator",
        flagged_user_id=123987,
        flagged_username="suspect_user",
        flag_level=2,
        category="spam"
    )
    
    if success:
        print("‚úÖ Log flag utilisateur enregistr√©")
    else:
        print("‚ùå √âchec log flag utilisateur")
    
    # Test 3: R√©cup√©ration historique
    print("3. Test r√©cup√©ration historique...")
    history = await audit_logger.get_audit_history(999888, days=1)
    print(f"   {len(history)} entr√©es d'audit trouv√©es")
    
    # Test 4: Actions d'un mod√©rateur
    print("4. Test actions mod√©rateur...")
    mod_actions = await audit_logger.get_moderator_actions(999888, 555444, days=1)
    print(f"   {len(mod_actions)} actions du mod√©rateur trouv√©es")
    
    print("‚úÖ Audit Logger - Tests OK")
    return True


async def test_supabase_integration():
    """Test de l'int√©gration Supabase (si disponible)"""
    print("\n=== TEST SUPABASE INTEGRATION ===")
    
    if not bot_settings.supabase_enabled:
        print("‚è≠Ô∏è Supabase d√©sactiv√© - test ignor√©")
        return True
    
    # Test connexion
    print("1. Test connexion...")
    connected = await supabase_client.connect()
    
    if not connected:
        print("‚ö†Ô∏è Connexion Supabase √©chou√©e - continuons sans DB")
        return True
    
    print("‚úÖ Connexion Supabase √©tablie")
    
    # Test sauvegarde anonyme
    print("2. Test sauvegarde anonyme...")
    test_report_data = {
        "id": "TEST_ANON_001",
        "guild_id": 999888,
        "target_username": "test_target",
        "category": "test",
        "reason": "Test syst√®me anti-abus",
        "evidence": "",
        "status": "pending",
        "reporter_hash": "hash_reporter_test_123456",
        "uniqueness_hash": "hash_unique_test_789012",
        "created_at": "2024-01-01T12:00:00Z",
        "metadata": {"test": True}
    }
    
    saved = await supabase_client.save_report_anonymized(test_report_data)
    if saved:
        print("‚úÖ Sauvegarde anonyme r√©ussie")
    else:
        print("‚ùå √âchec sauvegarde anonyme")
    
    # Test v√©rification doublon
    print("3. Test v√©rification doublon...")
    duplicate_id = await supabase_client.check_duplicate_report("hash_unique_test_789012")
    if duplicate_id:
        print(f"‚úÖ Doublon d√©tect√©: {duplicate_id}")
    else:
        print("‚ö†Ô∏è Aucun doublon d√©tect√© (normal si premi√®re ex√©cution)")
    
    # Test audit log
    print("4. Test audit log...")
    audit_success = await supabase_client.log_audit_action(
        action="test_action",
        guild_id=999888,
        moderator_id=555444,
        moderator_name="TestModerator",
        details={"test": True, "anonymous": True},
        report_id="TEST_ANON_001"
    )
    
    if audit_success:
        print("‚úÖ Audit log Supabase r√©ussi")
    else:
        print("‚ùå √âchec audit log Supabase")
    
    print("‚úÖ Supabase Integration - Tests OK")
    return True


async def main():
    """Fonction principale de test"""
    print("ü§ñ TEST COMPLET DU SYST√àME ANTI-ABUS ANONYME")
    print("=" * 60)
    
    # Configuration logging
    logger = setup_logging(debug_mode=True)
    
    # Validation config (avec salt temporaire si n√©cessaire)
    if not bot_settings.reporter_salt_secret:
        print("‚ö†Ô∏è Aucun salt configur√© - utilisation d'un salt temporaire")
        temp_salt = secrets.token_hex(32)
        os.environ['REPORTER_SALT_SECRET'] = temp_salt
        bot_settings.reporter_salt_secret = temp_salt
    
    if not validate_config():
        print("‚ùå Configuration invalide")
        return 1
    
    # Ex√©cuter tous les tests
    tests = [
        ("Anonymous Hasher", test_anonymous_hasher),
        ("Report Service", test_report_service),
        ("Audit Logger", test_audit_logger),
        ("Supabase Integration", test_supabase_integration)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            print(f"\nüß™ Ex√©cution: {test_name}")
            result = await test_func()
            if result:
                passed += 1
                print(f"‚úÖ {test_name} - SUCC√àS")
            else:
                print(f"‚ùå {test_name} - √âCHEC")
        except Exception as e:
            print(f"üí• {test_name} - ERREUR: {e}")
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print(f"üìä R√âSULTAT: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS SONT PASS√âS!")
        print("\nüîí Le syst√®me anti-abus anonyme est op√©rationnel:")
        print("   ‚úì Anonymat des reporters garanti")
        print("   ‚úì D√©tection de doublons fonctionnelle")
        print("   ‚úì Audit transparent activ√©") 
        print("   ‚úì Int√©gration base de donn√©es OK")
        return 0
    else:
        print(f"‚ö†Ô∏è {total - passed} tests ont √©chou√©")
        print("   V√©rifiez la configuration et les logs")
        return 1


if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Tests interrompus par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print(f"\nüí• Erreur fatale: {e}")
        sys.exit(1)